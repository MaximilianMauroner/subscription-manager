// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    sub           Sub[]
    member        Member[]
    Post          Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

//RRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=12
//RRULE:FREQ=WEEKLY;INTERVAL=1
//RRULE:FREQ=DAILY;INTERVAL=1

// repeatFirstDate: "2023-09-05T22:00:00.000+0000"
// repeatFlag: "RRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=6"

// repeatFirstDate: "2023-09-07T22:00:00.000+0000"
// repeatFlag: "RRULE:FREQ=YEARLY;INTERVAL=1"

// repeatFirstDate: "2023-09-07T22:00:00.000+0000"
// repeatFlag: "RRULE:FREQ=DAILY;INTERVAL=1"

enum RepeatFrequency {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

model IntervalPeriod {
    id String @id @default(cuid())

    repeatFirstDate DateTime
    repeatFlag      RepeatFrequency
    interval        Int

    monthDay Int?
    sub      Sub[]
}

model Sub {
    id String @id @default(cuid())

    name        String
    description String?
    price       Float

    intervalPeriodId String
    intervalPeriod   IntervalPeriod @relation(fields: [intervalPeriodId], references: [id])

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lastPaymentDate DateTime?
    nextPaymentDate DateTime?

    subMembers      SubMembers[]
    subPriceHistory SubPriceHistory[]
}

model SubPriceHistory {
    id String @id @default(cuid())

    subId String
    sub   Sub    @relation(fields: [subId], references: [id])

    newPrice Float
    oldPrice Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Member {
    id   String @id @default(cuid())
    name String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subMembers SubMembers[]

    @@unique([name, userId])
}

model SubMembers {
    id    String @id @default(cuid())
    share Float

    subId String
    sub   Sub    @relation(fields: [subId], references: [id])

    memberId String
    member   Member @relation(fields: [memberId], references: [id])

    subPayment             SubPaymentCapture[]
    IntervalPaymentCapture IntervalPaymentCapture[]

    @@unique([subId, memberId])
}

model IntervalPaymentCapture {
    subMemberId String   @id
    amount      Float
    paid        Boolean  @default(false)
    createdAt   DateTime @default(now())

    subMember SubMembers @relation(fields: [subMemberId], references: [id])
}

model SubPaymentCapture {
    subMemberId String   @id
    amount      Float
    createdAt   DateTime @default(now())

    subMember SubMembers @relation(fields: [subMemberId], references: [id])
}
